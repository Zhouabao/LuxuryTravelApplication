plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.huawei.agconnect'

}
/*
 keytool -list -v -keystore D:\AndroidProjects\LuxuryTravelApplication\luxurytravel.jks
 MD5:  7E:C3:B2:DB:72:38:2B:10:09:6C:58:BD:11:32:45:09
         SHA1: A5:25:64:71:8D:90:AA:51:C1:1C:7F:5C:E5:90:B6:A6:4C:EF:78:FC
         SHA256: B1:82:C2:D8:7E:0E:42:3C:ED:CD:E7:E8:21:1C:C6:7F:B6:84:E4:B2:E3:99:C1:59:F2:D8:85:03:CD:B2:72:49*/
android {

    signingConfigs {

        def password = "123456"
        def alias = "luxurytravel"
        def filePath = "D:\\AndroidProjects\\LuxuryTravelApplication\\luxurytravel.jks"

        dev {
            storeFile file(filePath)
            storePassword password
            keyAlias = alias
            keyPassword password
        }
        release {
            storeFile file(filePath)
            storePassword password
            keyAlias = alias
            keyPassword password
        }
    }


    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.sdy.luxurytravelapplication"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //版本名后面添加一句话，意思就是flavor dimension 它的维度就是该版本号，这样维度就是都是统一的了
        flavorDimensions "versionCode"
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "Umeng"]
        manifestPlaceholders = [qqappid: "1110939011"]



        ndk {
            //设置支持的SO库架构
            abiFilters "armeabi-v7a", "arm64-v8a"
//            abiFilters "armeabi", "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
        }

    }

    buildTypes {
        debug {
            signingConfig signingConfigs.dev
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release //设置签名信息
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
    }

    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/libRSSupport.so'
        pickFirst 'lib/x86_64/libRSSupport.so'
        pickFirst 'lib/x86/libRSSupport.so'
        pickFirst 'lib/armeabi-v7a/librsjni.so'
        pickFirst 'lib/arm64-v8a/librsjni.so'
        pickFirst 'lib/x86_64/librsjni.so'
        pickFirst 'lib/x86/librsjni.so'
        pickFirst 'lib/armeabi-v7a/librsjni_androidx.so'
        pickFirst 'lib/arm64-v8a/librsjni_androidx.so'
        pickFirst 'lib/x86_64/librsjni_androidx.so'
        pickFirst 'lib/x86/librsjni_androidx.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }


    // 渠道包定义，默认定义的名称就是渠道名称
    productFlavors {
        Huawei {}//投放华为应用市场
        Oppo {}//投放oppo市场
        Vivo {}//投放vivo市场
        Xiaomi {}//投放小米市场
        M360 {}//投放360市场
        Sougou {}//投放搜狗市场
        Meizu {}//投放魅族市场
        Lenovo {}//投放联想市场
        Anzhi {}//投放安卓智能市场
        Baidu {}//投放百度市场
        PP {}//投放PP助手市场
        Tencent {}//投放应用宝市场
        Yingyonghui {}//投放应用汇市场
        Samsung {}//投放三星市场
        Advertisement {}//运营投放渠道
        Google {}//谷歌市场

        //manifestPlaceholders 使用相关的值替换了UMENG_CHANNEL_VALUE
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation rootProject.ext.testDeps["junit"]
    androidTestImplementation rootProject.ext.testDeps["runner"]
    androidTestImplementation rootProject.ext.testDeps["espresso-core"]
    //leakCanary
    debugImplementation rootProject.ext.testDeps["leakcanary-debug"]
    releaseImplementation rootProject.ext.testDeps["leakcanary-release"]
    // Support库
    api rootProject.ext.supportLibs
    // 网络请求库
    implementation rootProject.ext.networkLibs
    // RxJava2
    implementation rootProject.ext.rxJavaLibs
    implementation rootProject.ext.commonLibs
    // APT dependencies(Kotlin内置的注解处理器)
    annotationProcessor rootProject.ext.annotationProcessorLibs
    //GlideOkHttp
    implementation(rootProject.ext.otherDeps["glideOkhttp"]) {
        exclude group: 'glide-parent'
    }
    debugImplementation rootProject.ext.testDeps["debug-db"]
    implementation project(path: ':faceplatform-ui')

}